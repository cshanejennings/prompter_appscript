// PROMPTER CUSTOM SCRIPTS
//
// CREATED BY SHANE MCGEEHAN, THE COOLEST DUDE EVER
// FOR PROMPT WRITING IN MIDJOURNEY, THE COOLEST AI EVER
// CONTACT ME AT SHANE@THEDREAMINGSTATE.COM WITH QUESTIONS


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 2022-09-20 (Details in the code below, simple scripts for SAVE and CLEAR buttons, and multiple selections) //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const active_worksheet = SpreadsheetApp.getActiveSheet();
const _sheet = (name) => active_worksheet.getSheetByName(name);

// THIS CUSTOM BUTTON FUNCTION CREATES A NEW ROW IN "MY PROMPTS" THEN COPIES THE CURRENT PROMPT TO IT WITH DATE AND TIME
function SaveMyPrompt() {
    const my_prompts = _sheet("Prompter");
    const prompt = my_prompts.getRange("B33").getValue();
    const last_row = my_prompts.getLastRow();
    my_prompts
        .getRange(last_row + 1, 2, 1, 2)
        .setValues([[
            Utilities.formatDate(new Date(), Session.getTimeZone(), 'yyyy-MM-dd HH:mm'),
            prompt
        ]]);
}

// THIS CUSTOM BUTTON FUNCTION SIMPLY CLEARS ALL THE INPUT FIELDS SO YOU CAN START EMPTY
const ClearPrompter = () => {
    const sheet = SpreadsheetApp.getActiveSheet();
    const cells_to_clear = [
        'B5', // MAIN IDEA
        'AH5', // MAIN IDEA WEIGHT
        'B8', // SUBJECTS 1
        'I8', // SUBJECTS 1 WEIGHT
        'B9', // SUBJECTS 2
        'I9', // SUBJECTS 2 WEIGHT
        'B10', // SUBJECTS 3
        'I10', // SUBJECTS 3 WEIGHT
        'L8', // IMAGE URL 1
        'AH8', // IMAGE 1 WEIGHT
        'L9', // IMAGE URL 2
        'AH9', // IMAGE 2 WEIGHT
        'L10', // IMAGE URL 3
        'AH10', // IMAGE 3 WEIGHT
        'B13', // DO NOT INCLUDE 1
        'B14', // DO NOT INCLUDE 2
        'B15', // DO NOT INCLUDE 3
        'B17', // STOP
        'L13', // STYLIZE
        'L14', // QUALITY
        'L15', // CHAOS
        'L16', // SEED
        'L17', // SAMESEED
        'B20', // ASPECT RATIO
        'C21', // ASPECT RATIO CUSTOM
        'I20', // MEDIUM
        'J21', // MEDIUM CUSTOM
        'P20', // CAMERA
        'Q21', // CAMERA CUSTOM
        'T22', // CAMERA WEIGHT
        'W20', // LIGHTING
        'X21', // LIGHTING CUSTOM
        'AA22', // LIGHTING WEIGHT
        'AD20', // COLOR
        'AE21', // COLOR CUSTOM
        'AH22', // COLOR WEIGHT
        'B25', // DESCRIPTOR 1
        'C26', // DESCRIPTOR 1 CUSTOM
        'F27', // DESCRIPTOR 1 WEIGHT
        'I25', // DESCRIPTOR 2
        'J26', // DESCRIPTOR 2 CUSTOM
        'M27', // DESCRIPTOR 2 WEIGHT
        'P25', // ARTIST
        'Q26', // ARTIST CUSTOM
        'T27', // ARTIST WEIGHT
        'W25', // FILM
        'X26', // FILM CUSTOM
        'AA27', // FILM WEIGHT
        'AD25', // VIDEO GAME
        'AE26', // VIDEO GAME CUSTOM
        'AH27', // VIDEO GAME WEIGHT
        'I30', // TEXT
    ]

    const cells_set_to_false = [
        'Z13', // TILE
        'Z14', // HD
        'Z15', // UPBETA
        'Z16', // UPLIGHT
        'Z17', // VIDEO
    ];

    cells_to_clear.map(addr => sheet.getRange(addr).clearContent());
    cells_set_to_false.map(addr => sheet.getRange(addr).setValue('FALSE'));

    sheet.getRange('B30').setValue('No Preference'); // DEPTH OF FIELD
    sheet.getRange('W30').setValue('10'); // TEXT WEIGHT
    sheet.getRange('AX12').setValue('No Clusters'); // CLUSTER
}

// THIS CUSTOM FUNCTION LETS YOU CHOOSE MULTIPLE ITEMS IN DROP DOWN MENUS
const onEdit = (edit_event) => {
    const active_sheet = SpreadsheetApp.getActiveSheet();
    const active_name = active_sheet.getName();
    // exits if not on the prompter sheet
    if (active_name !== "Prompter") return;
    
    const get_new_value = ({ value, oldValue }) => {
      // added this line to prevent section headers from being selected as options
      if(value.match(/[→█▬►]+/)?.length > 0) return oldValue;
      if (!value) return "";
      if (!oldValue) return value;
      return `${oldValue}, ${value}`;
    }
    
    // get the A1 address of the cell that was edited
    const edited_cell_address = edit_event.range.getA1Notation();
    
    //  FOUND A BUG, DOESN'T WORK, FIXING NOW, will remove this comment when done

    // get the A1 address of the cell that was edited
    
    switch (edited_cell_address) {
        case'P20':// CAMERA
        case'W20':// LIGHTING
        case'AD20':// COLOR
        case'B25':// DESCRIPTOR1
        case'I25':// DESCRIPTOR2
        case'P25 ':// ARTIST
        case'W25':// FILM
        case'AD25':// VIDEO GAME
            active_sheet
                .getRange(edited_cell_address)
                .setValue(get_new_value(edit_event));
            break;
        default:
    }
}
